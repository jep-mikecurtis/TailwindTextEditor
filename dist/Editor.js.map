{"version":3,"sources":["../../node_modules/alpinejs/dist/alpine.js","html/html.js","helpers/tooltip.js","Rapyd.js","Editor.js"],"names":["toolTip","tooltips","document","forEach","methods","tooltipHandleTag","name","init","selectionEnd","value","target","editor","addEventListener","e","preventDefault","bind","content","length","newContent","renderHtml","calcNumbers","getElementById","setBody","Rapyd"],"mappings":"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","file":"Editor.js","sourceRoot":"","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.Alpine = factory());\n}(this, (function () { 'use strict';\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  // Thanks @stimulus:\n  // https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts\n  function domReady() {\n    return new Promise(resolve => {\n      if (document.readyState == \"loading\") {\n        document.addEventListener(\"DOMContentLoaded\", resolve);\n      } else {\n        resolve();\n      }\n    });\n  }\n  function arrayUnique(array) {\n    return Array.from(new Set(array));\n  }\n  function isTesting() {\n    return navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\");\n  }\n  function checkedAttrLooseCompare(valueA, valueB) {\n    return valueA == valueB;\n  }\n  function warnIfMalformedTemplate(el, directive) {\n    if (el.tagName.toLowerCase() !== 'template') {\n      console.warn(`Alpine: [${directive}] directive should only be added to <template> tags. See https://github.com/alpinejs/alpine#${directive}`);\n    } else if (el.content.childElementCount !== 1) {\n      console.warn(`Alpine: <template> tag with [${directive}] encountered with an unexpected number of root elements. Make sure <template> has a single root element. `);\n    }\n  }\n  function kebabCase(subject) {\n    return subject.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/[_\\s]/, '-').toLowerCase();\n  }\n  function camelCase(subject) {\n    return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\n  }\n  function walk(el, callback) {\n    if (callback(el) === false) return;\n    let node = el.firstElementChild;\n\n    while (node) {\n      walk(node, callback);\n      node = node.nextElementSibling;\n    }\n  }\n  function debounce(func, wait) {\n    var timeout;\n    return function () {\n      var context = this,\n          args = arguments;\n\n      var later = function later() {\n        timeout = null;\n        func.apply(context, args);\n      };\n\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  const handleError = (el, expression, error) => {\n    console.warn(`Alpine Error: \"${error}\"\\n\\nExpression: \"${expression}\"\\nElement:`, el);\n\n    if (!isTesting()) {\n      Object.assign(error, {\n        el,\n        expression\n      });\n      throw error;\n    }\n  };\n\n  function tryCatch(cb, {\n    el,\n    expression\n  }) {\n    try {\n      const value = cb();\n      return value instanceof Promise ? value.catch(e => handleError(el, expression, e)) : value;\n    } catch (e) {\n      handleError(el, expression, e);\n    }\n  }\n\n  function saferEval(el, expression, dataContext, additionalHelperVariables = {}) {\n    return tryCatch(() => {\n      if (typeof expression === 'function') {\n        return expression.call(dataContext);\n      }\n\n      return new Function(['$data', ...Object.keys(additionalHelperVariables)], `var __alpine_result; with($data) { __alpine_result = ${expression} }; return __alpine_result`)(dataContext, ...Object.values(additionalHelperVariables));\n    }, {\n      el,\n      expression\n    });\n  }\n  function saferEvalNoReturn(el, expression, dataContext, additionalHelperVariables = {}) {\n    return tryCatch(() => {\n      if (typeof expression === 'function') {\n        return Promise.resolve(expression.call(dataContext, additionalHelperVariables['$event']));\n      }\n\n      let AsyncFunction = Function;\n      /* MODERN-ONLY:START */\n\n      AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;\n      /* MODERN-ONLY:END */\n      // For the cases when users pass only a function reference to the caller: `x-on:click=\"foo\"`\n      // Where \"foo\" is a function. Also, we'll pass the function the event instance when we call it.\n\n      if (Object.keys(dataContext).includes(expression)) {\n        let methodReference = new Function(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { return ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables));\n\n        if (typeof methodReference === 'function') {\n          return Promise.resolve(methodReference.call(dataContext, additionalHelperVariables['$event']));\n        } else {\n          return Promise.resolve();\n        }\n      }\n\n      return Promise.resolve(new AsyncFunction(['dataContext', ...Object.keys(additionalHelperVariables)], `with(dataContext) { ${expression} }`)(dataContext, ...Object.values(additionalHelperVariables)));\n    }, {\n      el,\n      expression\n    });\n  }\n  const xAttrRE = /^x-(on|bind|data|text|html|model|if|for|show|cloak|transition|ref|spread)\\b/;\n  function isXAttr(attr) {\n    const name = replaceAtAndColonWithStandardSyntax(attr.name);\n    return xAttrRE.test(name);\n  }\n  function getXAttrs(el, component, type) {\n    let directives = Array.from(el.attributes).filter(isXAttr).map(parseHtmlAttribute); // Get an object of directives from x-spread.\n\n    let spreadDirective = directives.filter(directive => directive.type === 'spread')[0];\n\n    if (spreadDirective) {\n      let spreadObject = saferEval(el, spreadDirective.expression, component.$data); // Add x-spread directives to the pile of existing directives.\n\n      directives = directives.concat(Object.entries(spreadObject).map(([name, value]) => parseHtmlAttribute({\n        name,\n        value\n      })));\n    }\n\n    if (type) return directives.filter(i => i.type === type);\n    return sortDirectives(directives);\n  }\n\n  function sortDirectives(directives) {\n    let directiveOrder = ['bind', 'model', 'show', 'catch-all'];\n    return directives.sort((a, b) => {\n      let typeA = directiveOrder.indexOf(a.type) === -1 ? 'catch-all' : a.type;\n      let typeB = directiveOrder.indexOf(b.type) === -1 ? 'catch-all' : b.type;\n      return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\n    });\n  }\n\n  function parseHtmlAttribute({\n    name,\n    value\n  }) {\n    const normalizedName = replaceAtAndColonWithStandardSyntax(name);\n    const typeMatch = normalizedName.match(xAttrRE);\n    const valueMatch = normalizedName.match(/:([a-zA-Z0-9\\-:]+)/);\n    const modifiers = normalizedName.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\n    return {\n      type: typeMatch ? typeMatch[1] : null,\n      value: valueMatch ? valueMatch[1] : null,\n      modifiers: modifiers.map(i => i.replace('.', '')),\n      expression: value\n    };\n  }\n  function isBooleanAttr(attrName) {\n    // As per HTML spec table https://html.spec.whatwg.org/multipage/indices.html#attributes-3:boolean-attribute\n    // Array roughly ordered by estimated usage\n    const booleanAttributes = ['disabled', 'checked', 'required', 'readonly', 'hidden', 'open', 'selected', 'autofocus', 'itemscope', 'multiple', 'novalidate', 'allowfullscreen', 'allowpaymentrequest', 'formnovalidate', 'autoplay', 'controls', 'loop', 'muted', 'playsinline', 'default', 'ismap', 'reversed', 'async', 'defer', 'nomodule'];\n    return booleanAttributes.includes(attrName);\n  }\n  function replaceAtAndColonWithStandardSyntax(name) {\n    if (name.startsWith('@')) {\n      return name.replace('@', 'x-on:');\n    } else if (name.startsWith(':')) {\n      return name.replace(':', 'x-bind:');\n    }\n\n    return name;\n  }\n  function convertClassStringToArray(classList, filterFn = Boolean) {\n    return classList.split(' ').filter(filterFn);\n  }\n  const TRANSITION_TYPE_IN = 'in';\n  const TRANSITION_TYPE_OUT = 'out';\n  const TRANSITION_CANCELLED = 'cancelled';\n  function transitionIn(el, show, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return show();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_IN) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0]; // If this is triggered by a x-show.transition.\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers; // If x-show.transition.out, we'll skip the \"in\" transition.\n\n      if (modifiers.includes('out') && !modifiers.includes('in')) return show();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out'); // If x-show.transition.in...out... only use \"in\" related modifiers for this transition.\n\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index < modifiers.indexOf('out')) : modifiers;\n      transitionHelperIn(el, modifiers, show, reject); // Otherwise, we can assume x-transition:enter.\n    } else if (attrs.some(attr => ['enter', 'enter-start', 'enter-end'].includes(attr.value))) {\n      transitionClassesIn(el, component, attrs, show, reject);\n    } else {\n      // If neither, just show that damn thing.\n      show();\n    }\n  }\n  function transitionOut(el, hide, reject, component, forceSkip = false) {\n    // We don't want to transition on the initial page load.\n    if (forceSkip) return hide();\n\n    if (el.__x_transition && el.__x_transition.type === TRANSITION_TYPE_OUT) {\n      // there is already a similar transition going on, this was probably triggered by\n      // a change in a different property, let's just leave the previous one doing its job\n      return;\n    }\n\n    const attrs = getXAttrs(el, component, 'transition');\n    const showAttr = getXAttrs(el, component, 'show')[0];\n\n    if (showAttr && showAttr.modifiers.includes('transition')) {\n      let modifiers = showAttr.modifiers;\n      if (modifiers.includes('in') && !modifiers.includes('out')) return hide();\n      const settingBothSidesOfTransition = modifiers.includes('in') && modifiers.includes('out');\n      modifiers = settingBothSidesOfTransition ? modifiers.filter((i, index) => index > modifiers.indexOf('out')) : modifiers;\n      transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hide, reject);\n    } else if (attrs.some(attr => ['leave', 'leave-start', 'leave-end'].includes(attr.value))) {\n      transitionClassesOut(el, component, attrs, hide, reject);\n    } else {\n      hide();\n    }\n  }\n  function transitionHelperIn(el, modifiers, showCallback, reject) {\n    // Default values inspired by: https://material.io/design/motion/speed.html#duration\n    const styleValues = {\n      duration: modifierValue(modifiers, 'duration', 150),\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      },\n      second: {\n        opacity: 1,\n        scale: 100\n      }\n    };\n    transitionHelper(el, modifiers, showCallback, () => {}, reject, styleValues, TRANSITION_TYPE_IN);\n  }\n  function transitionHelperOut(el, modifiers, settingBothSidesOfTransition, hideCallback, reject) {\n    // Make the \"out\" transition .5x slower than the \"in\". (Visually better)\n    // HOWEVER, if they explicitly set a duration for the \"out\" transition,\n    // use that.\n    const duration = settingBothSidesOfTransition ? modifierValue(modifiers, 'duration', 150) : modifierValue(modifiers, 'duration', 150) / 2;\n    const styleValues = {\n      duration: duration,\n      origin: modifierValue(modifiers, 'origin', 'center'),\n      first: {\n        opacity: 1,\n        scale: 100\n      },\n      second: {\n        opacity: 0,\n        scale: modifierValue(modifiers, 'scale', 95)\n      }\n    };\n    transitionHelper(el, modifiers, () => {}, hideCallback, reject, styleValues, TRANSITION_TYPE_OUT);\n  }\n\n  function modifierValue(modifiers, key, fallback) {\n    // If the modifier isn't present, use the default.\n    if (modifiers.indexOf(key) === -1) return fallback; // If it IS present, grab the value after it: x-show.transition.duration.500ms\n\n    const rawValue = modifiers[modifiers.indexOf(key) + 1];\n    if (!rawValue) return fallback;\n\n    if (key === 'scale') {\n      // Check if the very next value is NOT a number and return the fallback.\n      // If x-show.transition.scale, we'll use the default scale value.\n      // That is how a user opts out of the opacity transition.\n      if (!isNumeric(rawValue)) return fallback;\n    }\n\n    if (key === 'duration') {\n      // Support x-show.transition.duration.500ms && duration.500\n      let match = rawValue.match(/([0-9]+)ms/);\n      if (match) return match[1];\n    }\n\n    if (key === 'origin') {\n      // Support chaining origin directions: x-show.transition.top.right\n      if (['top', 'right', 'left', 'center', 'bottom'].includes(modifiers[modifiers.indexOf(key) + 2])) {\n        return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(' ');\n      }\n    }\n\n    return rawValue;\n  }\n\n  function transitionHelper(el, modifiers, hook1, hook2, reject, styleValues, type) {\n    // clear the previous transition if exists to avoid caching the wrong styles\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    } // If the user set these style values, we'll put them back when we're done with them.\n\n\n    const opacityCache = el.style.opacity;\n    const transformCache = el.style.transform;\n    const transformOriginCache = el.style.transformOrigin; // If no modifiers are present: x-show.transition, we'll default to both opacity and scale.\n\n    const noModifiers = !modifiers.includes('opacity') && !modifiers.includes('scale');\n    const transitionOpacity = noModifiers || modifiers.includes('opacity');\n    const transitionScale = noModifiers || modifiers.includes('scale'); // These are the explicit stages of a transition (same stages for in and for out).\n    // This way you can get a birds eye view of the hooks, and the differences\n    // between them.\n\n    const stages = {\n      start() {\n        if (transitionOpacity) el.style.opacity = styleValues.first.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.first.scale / 100})`;\n      },\n\n      during() {\n        if (transitionScale) el.style.transformOrigin = styleValues.origin;\n        el.style.transitionProperty = [transitionOpacity ? `opacity` : ``, transitionScale ? `transform` : ``].join(' ').trim();\n        el.style.transitionDuration = `${styleValues.duration / 1000}s`;\n        el.style.transitionTimingFunction = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        if (transitionOpacity) el.style.opacity = styleValues.second.opacity;\n        if (transitionScale) el.style.transform = `scale(${styleValues.second.scale / 100})`;\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        if (transitionOpacity) el.style.opacity = opacityCache;\n        if (transitionScale) el.style.transform = transformCache;\n        if (transitionScale) el.style.transformOrigin = transformOriginCache;\n        el.style.transitionProperty = null;\n        el.style.transitionDuration = null;\n        el.style.transitionTimingFunction = null;\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n\n  const ensureStringExpression = (expression, el, component) => {\n    return typeof expression === 'function' ? component.evaluateReturnExpression(el, expression) : expression;\n  };\n\n  function transitionClassesIn(el, component, directives, showCallback, reject) {\n    const enter = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter') || {\n      expression: ''\n    }).expression, el, component));\n    const enterStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-start') || {\n      expression: ''\n    }).expression, el, component));\n    const enterEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'enter-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, enter, enterStart, enterEnd, showCallback, () => {}, TRANSITION_TYPE_IN, reject);\n  }\n  function transitionClassesOut(el, component, directives, hideCallback, reject) {\n    const leave = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveStart = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-start') || {\n      expression: ''\n    }).expression, el, component));\n    const leaveEnd = convertClassStringToArray(ensureStringExpression((directives.find(i => i.value === 'leave-end') || {\n      expression: ''\n    }).expression, el, component));\n    transitionClasses(el, leave, leaveStart, leaveEnd, () => {}, hideCallback, TRANSITION_TYPE_OUT, reject);\n  }\n  function transitionClasses(el, classesDuring, classesStart, classesEnd, hook1, hook2, type, reject) {\n    // clear the previous transition if exists to avoid caching the wrong classes\n    if (el.__x_transition) {\n      el.__x_transition.cancel && el.__x_transition.cancel();\n    }\n\n    const originalClasses = el.__x_original_classes || [];\n    const stages = {\n      start() {\n        el.classList.add(...classesStart);\n      },\n\n      during() {\n        el.classList.add(...classesDuring);\n      },\n\n      show() {\n        hook1();\n      },\n\n      end() {\n        // Don't remove classes that were in the original class attribute.\n        el.classList.remove(...classesStart.filter(i => !originalClasses.includes(i)));\n        el.classList.add(...classesEnd);\n      },\n\n      hide() {\n        hook2();\n      },\n\n      cleanup() {\n        el.classList.remove(...classesDuring.filter(i => !originalClasses.includes(i)));\n        el.classList.remove(...classesEnd.filter(i => !originalClasses.includes(i)));\n      }\n\n    };\n    transition(el, stages, type, reject);\n  }\n  function transition(el, stages, type, reject) {\n    const finish = once(() => {\n      stages.hide(); // Adding an \"isConnected\" check, in case the callback\n      // removed the element from the DOM.\n\n      if (el.isConnected) {\n        stages.cleanup();\n      }\n\n      delete el.__x_transition;\n    });\n    el.__x_transition = {\n      // Set transition type so we can avoid clearing transition if the direction is the same\n      type: type,\n      // create a callback for the last stages of the transition so we can call it\n      // from different point and early terminate it. Once will ensure that function\n      // is only called one time.\n      cancel: once(() => {\n        reject(TRANSITION_CANCELLED);\n        finish();\n      }),\n      finish,\n      // This store the next animation frame so we can cancel it\n      nextFrame: null\n    };\n    stages.start();\n    stages.during();\n    el.__x_transition.nextFrame = requestAnimationFrame(() => {\n      // Note: Safari's transitionDuration property will list out comma separated transition durations\n      // for every single transition property. Let's grab the first one and call it a day.\n      let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, '').replace('s', '')) * 1000;\n\n      if (duration === 0) {\n        duration = Number(getComputedStyle(el).animationDuration.replace('s', '')) * 1000;\n      }\n\n      stages.show();\n      el.__x_transition.nextFrame = requestAnimationFrame(() => {\n        stages.end();\n        setTimeout(el.__x_transition.finish, duration);\n      });\n    });\n  }\n  function isNumeric(subject) {\n    return !Array.isArray(subject) && !isNaN(subject);\n  } // Thanks @vuejs\n  // https://github.com/vuejs/vue/blob/4de4649d9637262a9b007720b59f80ac72a5620c/src/shared/util.js\n\n  function once(callback) {\n    let called = false;\n    return function () {\n      if (!called) {\n        called = true;\n        callback.apply(this, arguments);\n      }\n    };\n  }\n\n  function handleForDirective(component, templateEl, expression, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(templateEl, 'x-for');\n    let iteratorNames = typeof expression === 'function' ? parseForExpression(component.evaluateReturnExpression(templateEl, expression)) : parseForExpression(expression);\n    let items = evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, templateEl, iteratorNames, extraVars); // As we walk the array, we'll also walk the DOM (updating/creating as we go).\n\n    let currentEl = templateEl;\n    items.forEach((item, index) => {\n      let iterationScopeVariables = getIterationScopeVariables(iteratorNames, item, index, items, extraVars());\n      let currentKey = generateKeyForIteration(component, templateEl, index, iterationScopeVariables);\n      let nextEl = lookAheadForMatchingKeyedElementAndMoveItIfFound(currentEl.nextElementSibling, currentKey); // If we haven't found a matching key, insert the element at the current position.\n\n      if (!nextEl) {\n        nextEl = addElementInLoopAfterCurrentEl(templateEl, currentEl); // And transition it in if it's not the first page load.\n\n        transitionIn(nextEl, () => {}, () => {}, component, initialUpdate);\n        nextEl.__x_for = iterationScopeVariables;\n        component.initializeElements(nextEl, () => nextEl.__x_for); // Otherwise update the element we found.\n      } else {\n        // Temporarily remove the key indicator to allow the normal \"updateElements\" to work.\n        delete nextEl.__x_for_key;\n        nextEl.__x_for = iterationScopeVariables;\n        component.updateElements(nextEl, () => nextEl.__x_for);\n      }\n\n      currentEl = nextEl;\n      currentEl.__x_for_key = currentKey;\n    });\n    removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component);\n  } // This was taken from VueJS 2.* core. Thanks Vue!\n\n  function parseForExpression(expression) {\n    let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\n    let stripParensRE = /^\\(|\\)$/g;\n    let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\n    let inMatch = String(expression).match(forAliasRE);\n    if (!inMatch) return;\n    let res = {};\n    res.items = inMatch[2].trim();\n    let item = inMatch[1].trim().replace(stripParensRE, '');\n    let iteratorMatch = item.match(forIteratorRE);\n\n    if (iteratorMatch) {\n      res.item = item.replace(forIteratorRE, '').trim();\n      res.index = iteratorMatch[1].trim();\n\n      if (iteratorMatch[2]) {\n        res.collection = iteratorMatch[2].trim();\n      }\n    } else {\n      res.item = item;\n    }\n\n    return res;\n  }\n\n  function getIterationScopeVariables(iteratorNames, item, index, items, extraVars) {\n    // We must create a new object, so each iteration has a new scope\n    let scopeVariables = extraVars ? _objectSpread2({}, extraVars) : {};\n    scopeVariables[iteratorNames.item] = item;\n    if (iteratorNames.index) scopeVariables[iteratorNames.index] = index;\n    if (iteratorNames.collection) scopeVariables[iteratorNames.collection] = items;\n    return scopeVariables;\n  }\n\n  function generateKeyForIteration(component, el, index, iterationScopeVariables) {\n    let bindKeyAttribute = getXAttrs(el, component, 'bind').filter(attr => attr.value === 'key')[0]; // If the dev hasn't specified a key, just return the index of the iteration.\n\n    if (!bindKeyAttribute) return index;\n    return component.evaluateReturnExpression(el, bindKeyAttribute.expression, () => iterationScopeVariables);\n  }\n\n  function evaluateItemsAndReturnEmptyIfXIfIsPresentAndFalseOnElement(component, el, iteratorNames, extraVars) {\n    let ifAttribute = getXAttrs(el, component, 'if')[0];\n\n    if (ifAttribute && !component.evaluateReturnExpression(el, ifAttribute.expression)) {\n      return [];\n    }\n\n    let items = component.evaluateReturnExpression(el, iteratorNames.items, extraVars); // This adds support for the `i in n` syntax.\n\n    if (isNumeric(items) && items >= 0) {\n      items = Array.from(Array(items).keys(), i => i + 1);\n    }\n\n    return items;\n  }\n\n  function addElementInLoopAfterCurrentEl(templateEl, currentEl) {\n    let clone = document.importNode(templateEl.content, true);\n    currentEl.parentElement.insertBefore(clone, currentEl.nextElementSibling);\n    return currentEl.nextElementSibling;\n  }\n\n  function lookAheadForMatchingKeyedElementAndMoveItIfFound(nextEl, currentKey) {\n    if (!nextEl) return; // If we are already past the x-for generated elements, we don't need to look ahead.\n\n    if (nextEl.__x_for_key === undefined) return; // If the the key's DO match, no need to look ahead.\n\n    if (nextEl.__x_for_key === currentKey) return nextEl; // If they don't, we'll look ahead for a match.\n    // If we find it, we'll move it to the current position in the loop.\n\n    let tmpNextEl = nextEl;\n\n    while (tmpNextEl) {\n      if (tmpNextEl.__x_for_key === currentKey) {\n        return tmpNextEl.parentElement.insertBefore(tmpNextEl, nextEl);\n      }\n\n      tmpNextEl = tmpNextEl.nextElementSibling && tmpNextEl.nextElementSibling.__x_for_key !== undefined ? tmpNextEl.nextElementSibling : false;\n    }\n  }\n\n  function removeAnyLeftOverElementsFromPreviousUpdate(currentEl, component) {\n    var nextElementFromOldLoop = currentEl.nextElementSibling && currentEl.nextElementSibling.__x_for_key !== undefined ? currentEl.nextElementSibling : false;\n\n    while (nextElementFromOldLoop) {\n      let nextElementFromOldLoopImmutable = nextElementFromOldLoop;\n      let nextSibling = nextElementFromOldLoop.nextElementSibling;\n      transitionOut(nextElementFromOldLoop, () => {\n        nextElementFromOldLoopImmutable.remove();\n      }, () => {}, component);\n      nextElementFromOldLoop = nextSibling && nextSibling.__x_for_key !== undefined ? nextSibling : false;\n    }\n  }\n\n  function handleAttributeBindingDirective(component, el, attrName, expression, extraVars, attrType, modifiers) {\n    var value = component.evaluateReturnExpression(el, expression, extraVars);\n\n    if (attrName === 'value') {\n      if (Alpine.ignoreFocusedForValueBinding && document.activeElement.isSameNode(el)) return; // If nested model key is undefined, set the default value to empty string.\n\n      if (value === undefined && String(expression).match(/\\./)) {\n        value = '';\n      }\n\n      if (el.type === 'radio') {\n        // Set radio value from x-bind:value, if no \"value\" attribute exists.\n        // If there are any initial state values, radio will have a correct\n        // \"checked\" value since x-bind:value is processed before x-model.\n        if (el.attributes.value === undefined && attrType === 'bind') {\n          el.value = value;\n        } else if (attrType !== 'bind') {\n          el.checked = checkedAttrLooseCompare(el.value, value);\n        }\n      } else if (el.type === 'checkbox') {\n        // If we are explicitly binding a string to the :value, set the string,\n        // If the value is a boolean, leave it alone, it will be set to \"on\"\n        // automatically.\n        if (typeof value !== 'boolean' && ![null, undefined].includes(value) && attrType === 'bind') {\n          el.value = String(value);\n        } else if (attrType !== 'bind') {\n          if (Array.isArray(value)) {\n            // I'm purposely not using Array.includes here because it's\n            // strict, and because of Numeric/String mis-casting, I\n            // want the \"includes\" to be \"fuzzy\".\n            el.checked = value.some(val => checkedAttrLooseCompare(val, el.value));\n          } else {\n            el.checked = !!value;\n          }\n        }\n      } else if (el.tagName === 'SELECT') {\n        updateSelect(el, value);\n      } else {\n        if (el.value === value) return;\n        el.value = value;\n      }\n    } else if (attrName === 'class') {\n      if (Array.isArray(value)) {\n        const originalClasses = el.__x_original_classes || [];\n        el.setAttribute('class', arrayUnique(originalClasses.concat(value)).join(' '));\n      } else if (typeof value === 'object') {\n        // Sorting the keys / class names by their boolean value will ensure that\n        // anything that evaluates to `false` and needs to remove classes is run first.\n        const keysSortedByBooleanValue = Object.keys(value).sort((a, b) => value[a] - value[b]);\n        keysSortedByBooleanValue.forEach(classNames => {\n          if (value[classNames]) {\n            convertClassStringToArray(classNames).forEach(className => el.classList.add(className));\n          } else {\n            convertClassStringToArray(classNames).forEach(className => el.classList.remove(className));\n          }\n        });\n      } else {\n        const originalClasses = el.__x_original_classes || [];\n        const newClasses = value ? convertClassStringToArray(value) : [];\n        el.setAttribute('class', arrayUnique(originalClasses.concat(newClasses)).join(' '));\n      }\n    } else {\n      attrName = modifiers.includes('camel') ? camelCase(attrName) : attrName; // If an attribute's bound value is null, undefined or false, remove the attribute\n\n      if ([null, undefined, false].includes(value)) {\n        el.removeAttribute(attrName);\n      } else {\n        isBooleanAttr(attrName) ? setIfChanged(el, attrName, attrName) : setIfChanged(el, attrName, value);\n      }\n    }\n  }\n\n  function setIfChanged(el, attrName, value) {\n    if (el.getAttribute(attrName) != value) {\n      el.setAttribute(attrName, value);\n    }\n  }\n\n  function updateSelect(el, value) {\n    const arrayWrappedValue = [].concat(value).map(value => {\n      return value + '';\n    });\n    Array.from(el.options).forEach(option => {\n      option.selected = arrayWrappedValue.includes(option.value || option.text);\n    });\n  }\n\n  function handleTextDirective(el, output, expression) {\n    // If nested model key is undefined, set the default value to empty string.\n    if (output === undefined && String(expression).match(/\\./)) {\n      output = '';\n    }\n\n    el.textContent = output;\n  }\n\n  function handleHtmlDirective(component, el, expression, extraVars) {\n    el.innerHTML = component.evaluateReturnExpression(el, expression, extraVars);\n  }\n\n  function handleShowDirective(component, el, value, modifiers, initialUpdate = false) {\n    const hide = () => {\n      el.style.display = 'none';\n      el.__x_is_shown = false;\n    };\n\n    const show = () => {\n      if (el.style.length === 1 && el.style.display === 'none') {\n        el.removeAttribute('style');\n      } else {\n        el.style.removeProperty('display');\n      }\n\n      el.__x_is_shown = true;\n    };\n\n    if (initialUpdate === true) {\n      if (value) {\n        show();\n      } else {\n        hide();\n      }\n\n      return;\n    }\n\n    const handle = (resolve, reject) => {\n      if (value) {\n        if (el.style.display === 'none' || el.__x_transition) {\n          transitionIn(el, () => {\n            show();\n          }, reject, component);\n        }\n\n        resolve(() => {});\n      } else {\n        if (el.style.display !== 'none') {\n          transitionOut(el, () => {\n            resolve(() => {\n              hide();\n            });\n          }, reject, component);\n        } else {\n          resolve(() => {});\n        }\n      }\n    }; // The working of x-show is a bit complex because we need to\n    // wait for any child transitions to finish before hiding\n    // some element. Also, this has to be done recursively.\n    // If x-show.immediate, foregoe the waiting.\n\n\n    if (modifiers.includes('immediate')) {\n      handle(finish => finish(), () => {});\n      return;\n    } // x-show is encountered during a DOM tree walk. If an element\n    // we encounter is NOT a child of another x-show element we\n    // can execute the previous x-show stack (if one exists).\n\n\n    if (component.showDirectiveLastElement && !component.showDirectiveLastElement.contains(el)) {\n      component.executeAndClearRemainingShowDirectiveStack();\n    }\n\n    component.showDirectiveStack.push(handle);\n    component.showDirectiveLastElement = el;\n  }\n\n  function handleIfDirective(component, el, expressionResult, initialUpdate, extraVars) {\n    warnIfMalformedTemplate(el, 'x-if');\n    const elementHasAlreadyBeenAdded = el.nextElementSibling && el.nextElementSibling.__x_inserted_me === true;\n\n    if (expressionResult && (!elementHasAlreadyBeenAdded || el.__x_transition)) {\n      const clone = document.importNode(el.content, true);\n      el.parentElement.insertBefore(clone, el.nextElementSibling);\n      transitionIn(el.nextElementSibling, () => {}, () => {}, component, initialUpdate);\n      component.initializeElements(el.nextElementSibling, extraVars);\n      el.nextElementSibling.__x_inserted_me = true;\n    } else if (!expressionResult && elementHasAlreadyBeenAdded) {\n      transitionOut(el.nextElementSibling, () => {\n        el.nextElementSibling.remove();\n      }, () => {}, component, initialUpdate);\n    }\n  }\n\n  function registerListener(component, el, event, modifiers, expression, extraVars = {}) {\n    const options = {\n      passive: modifiers.includes('passive')\n    };\n\n    if (modifiers.includes('camel')) {\n      event = camelCase(event);\n    }\n\n    let handler, listenerTarget;\n\n    if (modifiers.includes('away')) {\n      listenerTarget = document;\n\n      handler = e => {\n        // Don't do anything if the click came from the element or within it.\n        if (el.contains(e.target)) return; // Don't do anything if this element isn't currently visible.\n\n        if (el.offsetWidth < 1 && el.offsetHeight < 1) return; // Now that we are sure the element is visible, AND the click\n        // is from outside it, let's run the expression.\n\n        runListenerHandler(component, expression, e, extraVars);\n\n        if (modifiers.includes('once')) {\n          document.removeEventListener(event, handler, options);\n        }\n      };\n    } else {\n      listenerTarget = modifiers.includes('window') ? window : modifiers.includes('document') ? document : el;\n\n      handler = e => {\n        // Remove this global event handler if the element that declared it\n        // has been removed. It's now stale.\n        if (listenerTarget === window || listenerTarget === document) {\n          if (!document.body.contains(el)) {\n            listenerTarget.removeEventListener(event, handler, options);\n            return;\n          }\n        }\n\n        if (isKeyEvent(event)) {\n          if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\n            return;\n          }\n        }\n\n        if (modifiers.includes('prevent')) e.preventDefault();\n        if (modifiers.includes('stop')) e.stopPropagation(); // If the .self modifier isn't present, or if it is present and\n        // the target element matches the element we are registering the\n        // event on, run the handler\n\n        if (!modifiers.includes('self') || e.target === el) {\n          const returnValue = runListenerHandler(component, expression, e, extraVars);\n          returnValue.then(value => {\n            if (value === false) {\n              e.preventDefault();\n            } else {\n              if (modifiers.includes('once')) {\n                listenerTarget.removeEventListener(event, handler, options);\n              }\n            }\n          });\n        }\n      };\n    }\n\n    if (modifiers.includes('debounce')) {\n      let nextModifier = modifiers[modifiers.indexOf('debounce') + 1] || 'invalid-wait';\n      let wait = isNumeric(nextModifier.split('ms')[0]) ? Number(nextModifier.split('ms')[0]) : 250;\n      handler = debounce(handler, wait);\n    }\n\n    listenerTarget.addEventListener(event, handler, options);\n  }\n\n  function runListenerHandler(component, expression, e, extraVars) {\n    return component.evaluateCommandExpression(e.target, expression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        '$event': e\n      });\n    });\n  }\n\n  function isKeyEvent(event) {\n    return ['keydown', 'keyup'].includes(event);\n  }\n\n  function isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\n    let keyModifiers = modifiers.filter(i => {\n      return !['window', 'document', 'prevent', 'stop'].includes(i);\n    });\n\n    if (keyModifiers.includes('debounce')) {\n      let debounceIndex = keyModifiers.indexOf('debounce');\n      keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || 'invalid-wait').split('ms')[0]) ? 2 : 1);\n    } // If no modifier is specified, we'll call it a press.\n\n\n    if (keyModifiers.length === 0) return false; // If one is passed, AND it matches the key pressed, we'll call it a press.\n\n    if (keyModifiers.length === 1 && keyModifiers[0] === keyToModifier(e.key)) return false; // The user is listening for key combinations.\n\n    const systemKeyModifiers = ['ctrl', 'shift', 'alt', 'meta', 'cmd', 'super'];\n    const selectedSystemKeyModifiers = systemKeyModifiers.filter(modifier => keyModifiers.includes(modifier));\n    keyModifiers = keyModifiers.filter(i => !selectedSystemKeyModifiers.includes(i));\n\n    if (selectedSystemKeyModifiers.length > 0) {\n      const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter(modifier => {\n        // Alias \"cmd\" and \"super\" to \"meta\"\n        if (modifier === 'cmd' || modifier === 'super') modifier = 'meta';\n        return e[`${modifier}Key`];\n      }); // If all the modifiers selected are pressed, ...\n\n      if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\n        // AND the remaining key is pressed as well. It's a press.\n        if (keyModifiers[0] === keyToModifier(e.key)) return false;\n      }\n    } // We'll call it NOT a valid keypress.\n\n\n    return true;\n  }\n\n  function keyToModifier(key) {\n    switch (key) {\n      case '/':\n        return 'slash';\n\n      case ' ':\n      case 'Spacebar':\n        return 'space';\n\n      default:\n        return key && kebabCase(key);\n    }\n  }\n\n  function registerModelListener(component, el, modifiers, expression, extraVars) {\n    // If the element we are binding to is a select, a radio, or checkbox\n    // we'll listen for the change event instead of the \"input\" event.\n    var event = el.tagName.toLowerCase() === 'select' || ['checkbox', 'radio'].includes(el.type) || modifiers.includes('lazy') ? 'change' : 'input';\n    const listenerExpression = `${expression} = rightSideOfExpression($event, ${expression})`;\n    registerListener(component, el, event, modifiers, listenerExpression, () => {\n      return _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        rightSideOfExpression: generateModelAssignmentFunction(el, modifiers, expression)\n      });\n    });\n  }\n\n  function generateModelAssignmentFunction(el, modifiers, expression) {\n    if (el.type === 'radio') {\n      // Radio buttons only work properly when they share a name attribute.\n      // People might assume we take care of that for them, because\n      // they already set a shared \"x-model\" attribute.\n      if (!el.hasAttribute('name')) el.setAttribute('name', expression);\n    }\n\n    return (event, currentValue) => {\n      // Check for event.detail due to an issue where IE11 handles other events as a CustomEvent.\n      if (event instanceof CustomEvent && event.detail) {\n        return event.detail;\n      } else if (el.type === 'checkbox') {\n        // If the data we are binding to is an array, toggle its value inside the array.\n        if (Array.isArray(currentValue)) {\n          const newValue = modifiers.includes('number') ? safeParseNumber(event.target.value) : event.target.value;\n          return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter(el => !checkedAttrLooseCompare(el, newValue));\n        } else {\n          return event.target.checked;\n        }\n      } else if (el.tagName.toLowerCase() === 'select' && el.multiple) {\n        return modifiers.includes('number') ? Array.from(event.target.selectedOptions).map(option => {\n          const rawValue = option.value || option.text;\n          return safeParseNumber(rawValue);\n        }) : Array.from(event.target.selectedOptions).map(option => {\n          return option.value || option.text;\n        });\n      } else {\n        const rawValue = event.target.value;\n        return modifiers.includes('number') ? safeParseNumber(rawValue) : modifiers.includes('trim') ? rawValue.trim() : rawValue;\n      }\n    };\n  }\n\n  function safeParseNumber(rawValue) {\n    const number = rawValue ? parseFloat(rawValue) : null;\n    return isNumeric(number) ? number : rawValue;\n  }\n\n  /**\n   * Copyright (C) 2017 salesforce.com, inc.\n   */\n  const { isArray } = Array;\n  const { getPrototypeOf, create: ObjectCreate, defineProperty: ObjectDefineProperty, defineProperties: ObjectDefineProperties, isExtensible, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, preventExtensions, hasOwnProperty, } = Object;\n  const { push: ArrayPush, concat: ArrayConcat, map: ArrayMap, } = Array.prototype;\n  function isUndefined(obj) {\n      return obj === undefined;\n  }\n  function isFunction(obj) {\n      return typeof obj === 'function';\n  }\n  function isObject(obj) {\n      return typeof obj === 'object';\n  }\n  const proxyToValueMap = new WeakMap();\n  function registerProxy(proxy, value) {\n      proxyToValueMap.set(proxy, value);\n  }\n  const unwrap = (replicaOrAny) => proxyToValueMap.get(replicaOrAny) || replicaOrAny;\n\n  function wrapValue(membrane, value) {\n      return membrane.valueIsObservable(value) ? membrane.getProxy(value) : value;\n  }\n  /**\n   * Unwrap property descriptors will set value on original descriptor\n   * We only need to unwrap if value is specified\n   * @param descriptor external descrpitor provided to define new property on original value\n   */\n  function unwrapDescriptor(descriptor) {\n      if (hasOwnProperty.call(descriptor, 'value')) {\n          descriptor.value = unwrap(descriptor.value);\n      }\n      return descriptor;\n  }\n  function lockShadowTarget(membrane, shadowTarget, originalTarget) {\n      const targetKeys = ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      targetKeys.forEach((key) => {\n          let descriptor = getOwnPropertyDescriptor(originalTarget, key);\n          // We do not need to wrap the descriptor if configurable\n          // Because we can deal with wrapping it when user goes through\n          // Get own property descriptor. There is also a chance that this descriptor\n          // could change sometime in the future, so we can defer wrapping\n          // until we need to\n          if (!descriptor.configurable) {\n              descriptor = wrapDescriptor(membrane, descriptor, wrapValue);\n          }\n          ObjectDefineProperty(shadowTarget, key, descriptor);\n      });\n      preventExtensions(shadowTarget);\n  }\n  class ReactiveProxyHandler {\n      constructor(membrane, value) {\n          this.originalTarget = value;\n          this.membrane = membrane;\n      }\n      get(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const value = originalTarget[key];\n          const { valueObserved } = membrane;\n          valueObserved(originalTarget, key);\n          return membrane.getProxy(value);\n      }\n      set(shadowTarget, key, value) {\n          const { originalTarget, membrane: { valueMutated } } = this;\n          const oldValue = originalTarget[key];\n          if (oldValue !== value) {\n              originalTarget[key] = value;\n              valueMutated(originalTarget, key);\n          }\n          else if (key === 'length' && isArray(originalTarget)) {\n              // fix for issue #236: push will add the new index, and by the time length\n              // is updated, the internal length is already equal to the new length value\n              // therefore, the oldValue is equal to the value. This is the forking logic\n              // to support this use case.\n              valueMutated(originalTarget, key);\n          }\n          return true;\n      }\n      deleteProperty(shadowTarget, key) {\n          const { originalTarget, membrane: { valueMutated } } = this;\n          delete originalTarget[key];\n          valueMutated(originalTarget, key);\n          return true;\n      }\n      apply(shadowTarget, thisArg, argArray) {\n          /* No op */\n      }\n      construct(target, argArray, newTarget) {\n          /* No op */\n      }\n      has(shadowTarget, key) {\n          const { originalTarget, membrane: { valueObserved } } = this;\n          valueObserved(originalTarget, key);\n          return key in originalTarget;\n      }\n      ownKeys(shadowTarget) {\n          const { originalTarget } = this;\n          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      }\n      isExtensible(shadowTarget) {\n          const shadowIsExtensible = isExtensible(shadowTarget);\n          if (!shadowIsExtensible) {\n              return shadowIsExtensible;\n          }\n          const { originalTarget, membrane } = this;\n          const targetIsExtensible = isExtensible(originalTarget);\n          if (!targetIsExtensible) {\n              lockShadowTarget(membrane, shadowTarget, originalTarget);\n          }\n          return targetIsExtensible;\n      }\n      setPrototypeOf(shadowTarget, prototype) {\n      }\n      getPrototypeOf(shadowTarget) {\n          const { originalTarget } = this;\n          return getPrototypeOf(originalTarget);\n      }\n      getOwnPropertyDescriptor(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const { valueObserved } = this.membrane;\n          // keys looked up via hasOwnProperty need to be reactive\n          valueObserved(originalTarget, key);\n          let desc = getOwnPropertyDescriptor(originalTarget, key);\n          if (isUndefined(desc)) {\n              return desc;\n          }\n          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n          if (!isUndefined(shadowDescriptor)) {\n              return shadowDescriptor;\n          }\n          // Note: by accessing the descriptor, the key is marked as observed\n          // but access to the value, setter or getter (if available) cannot observe\n          // mutations, just like regular methods, in which case we just do nothing.\n          desc = wrapDescriptor(membrane, desc, wrapValue);\n          if (!desc.configurable) {\n              // If descriptor from original target is not configurable,\n              // We must copy the wrapped descriptor over to the shadow target.\n              // Otherwise, proxy will throw an invariant error.\n              // This is our last chance to lock the value.\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n              ObjectDefineProperty(shadowTarget, key, desc);\n          }\n          return desc;\n      }\n      preventExtensions(shadowTarget) {\n          const { originalTarget, membrane } = this;\n          lockShadowTarget(membrane, shadowTarget, originalTarget);\n          preventExtensions(originalTarget);\n          return true;\n      }\n      defineProperty(shadowTarget, key, descriptor) {\n          const { originalTarget, membrane } = this;\n          const { valueMutated } = membrane;\n          const { configurable } = descriptor;\n          // We have to check for value in descriptor\n          // because Object.freeze(proxy) calls this method\n          // with only { configurable: false, writeable: false }\n          // Additionally, method will only be called with writeable:false\n          // if the descriptor has a value, as opposed to getter/setter\n          // So we can just check if writable is present and then see if\n          // value is present. This eliminates getter and setter descriptors\n          if (hasOwnProperty.call(descriptor, 'writable') && !hasOwnProperty.call(descriptor, 'value')) {\n              const originalDescriptor = getOwnPropertyDescriptor(originalTarget, key);\n              descriptor.value = originalDescriptor.value;\n          }\n          ObjectDefineProperty(originalTarget, key, unwrapDescriptor(descriptor));\n          if (configurable === false) {\n              ObjectDefineProperty(shadowTarget, key, wrapDescriptor(membrane, descriptor, wrapValue));\n          }\n          valueMutated(originalTarget, key);\n          return true;\n      }\n  }\n\n  function wrapReadOnlyValue(membrane, value) {\n      return membrane.valueIsObservable(value) ? membrane.getReadOnlyProxy(value) : value;\n  }\n  class ReadOnlyHandler {\n      constructor(membrane, value) {\n          this.originalTarget = value;\n          this.membrane = membrane;\n      }\n      get(shadowTarget, key) {\n          const { membrane, originalTarget } = this;\n          const value = originalTarget[key];\n          const { valueObserved } = membrane;\n          valueObserved(originalTarget, key);\n          return membrane.getReadOnlyProxy(value);\n      }\n      set(shadowTarget, key, value) {\n          return false;\n      }\n      deleteProperty(shadowTarget, key) {\n          return false;\n      }\n      apply(shadowTarget, thisArg, argArray) {\n          /* No op */\n      }\n      construct(target, argArray, newTarget) {\n          /* No op */\n      }\n      has(shadowTarget, key) {\n          const { originalTarget, membrane: { valueObserved } } = this;\n          valueObserved(originalTarget, key);\n          return key in originalTarget;\n      }\n      ownKeys(shadowTarget) {\n          const { originalTarget } = this;\n          return ArrayConcat.call(getOwnPropertyNames(originalTarget), getOwnPropertySymbols(originalTarget));\n      }\n      setPrototypeOf(shadowTarget, prototype) {\n      }\n      getOwnPropertyDescriptor(shadowTarget, key) {\n          const { originalTarget, membrane } = this;\n          const { valueObserved } = membrane;\n          // keys looked up via hasOwnProperty need to be reactive\n          valueObserved(originalTarget, key);\n          let desc = getOwnPropertyDescriptor(originalTarget, key);\n          if (isUndefined(desc)) {\n              return desc;\n          }\n          const shadowDescriptor = getOwnPropertyDescriptor(shadowTarget, key);\n          if (!isUndefined(shadowDescriptor)) {\n              return shadowDescriptor;\n          }\n          // Note: by accessing the descriptor, the key is marked as observed\n          // but access to the value or getter (if available) cannot be observed,\n          // just like regular methods, in which case we just do nothing.\n          desc = wrapDescriptor(membrane, desc, wrapReadOnlyValue);\n          if (hasOwnProperty.call(desc, 'set')) {\n              desc.set = undefined; // readOnly membrane does not allow setters\n          }\n          if (!desc.configurable) {\n              // If descriptor from original target is not configurable,\n              // We must copy the wrapped descriptor over to the shadow target.\n              // Otherwise, proxy will throw an invariant error.\n              // This is our last chance to lock the value.\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/getOwnPropertyDescriptor#Invariants\n              ObjectDefineProperty(shadowTarget, key, desc);\n          }\n          return desc;\n      }\n      preventExtensions(shadowTarget) {\n          return false;\n      }\n      defineProperty(shadowTarget, key, descriptor) {\n          return false;\n      }\n  }\n  function createShadowTarget(value) {\n      let shadowTarget = undefined;\n      if (isArray(value)) {\n          shadowTarget = [];\n      }\n      else if (isObject(value)) {\n          shadowTarget = {};\n      }\n      return shadowTarget;\n  }\n  const ObjectDotPrototype = Object.prototype;\n  function defaultValueIsObservable(value) {\n      // intentionally checking for null\n      if (value === null) {\n          return false;\n      }\n      // treat all non-object types, including undefined, as non-observable values\n      if (typeof value !== 'object') {\n          return false;\n      }\n      if (isArray(value)) {\n          return true;\n      }\n      const proto = getPrototypeOf(value);\n      return (proto === ObjectDotPrototype || proto === null || getPrototypeOf(proto) === null);\n  }\n  const defaultValueObserved = (obj, key) => {\n      /* do nothing */\n  };\n  const defaultValueMutated = (obj, key) => {\n      /* do nothing */\n  };\n  const defaultValueDistortion = (value) => value;\n  function wrapDescriptor(membrane, descriptor, getValue) {\n      const { set, get } = descriptor;\n      if (hasOwnProperty.call(descriptor, 'value')) {\n          descriptor.value = getValue(membrane, descriptor.value);\n      }\n      else {\n          if (!isUndefined(get)) {\n              descriptor.get = function () {\n                  // invoking the original getter with the original target\n                  return getValue(membrane, get.call(unwrap(this)));\n              };\n          }\n          if (!isUndefined(set)) {\n              descriptor.set = function (value) {\n                  // At this point we don't have a clear indication of whether\n                  // or not a valid mutation will occur, we don't have the key,\n                  // and we are not sure why and how they are invoking this setter.\n                  // Nevertheless we preserve the original semantics by invoking the\n                  // original setter with the original target and the unwrapped value\n                  set.call(unwrap(this), membrane.unwrapProxy(value));\n              };\n          }\n      }\n      return descriptor;\n  }\n  class ReactiveMembrane {\n      constructor(options) {\n          this.valueDistortion = defaultValueDistortion;\n          this.valueMutated = defaultValueMutated;\n          this.valueObserved = defaultValueObserved;\n          this.valueIsObservable = defaultValueIsObservable;\n          this.objectGraph = new WeakMap();\n          if (!isUndefined(options)) {\n              const { valueDistortion, valueMutated, valueObserved, valueIsObservable } = options;\n              this.valueDistortion = isFunction(valueDistortion) ? valueDistortion : defaultValueDistortion;\n              this.valueMutated = isFunction(valueMutated) ? valueMutated : defaultValueMutated;\n              this.valueObserved = isFunction(valueObserved) ? valueObserved : defaultValueObserved;\n              this.valueIsObservable = isFunction(valueIsObservable) ? valueIsObservable : defaultValueIsObservable;\n          }\n      }\n      getProxy(value) {\n          const unwrappedValue = unwrap(value);\n          const distorted = this.valueDistortion(unwrappedValue);\n          if (this.valueIsObservable(distorted)) {\n              const o = this.getReactiveState(unwrappedValue, distorted);\n              // when trying to extract the writable version of a readonly\n              // we return the readonly.\n              return o.readOnly === value ? value : o.reactive;\n          }\n          return distorted;\n      }\n      getReadOnlyProxy(value) {\n          value = unwrap(value);\n          const distorted = this.valueDistortion(value);\n          if (this.valueIsObservable(distorted)) {\n              return this.getReactiveState(value, distorted).readOnly;\n          }\n          return distorted;\n      }\n      unwrapProxy(p) {\n          return unwrap(p);\n      }\n      getReactiveState(value, distortedValue) {\n          const { objectGraph, } = this;\n          let reactiveState = objectGraph.get(distortedValue);\n          if (reactiveState) {\n              return reactiveState;\n          }\n          const membrane = this;\n          reactiveState = {\n              get reactive() {\n                  const reactiveHandler = new ReactiveProxyHandler(membrane, distortedValue);\n                  // caching the reactive proxy after the first time it is accessed\n                  const proxy = new Proxy(createShadowTarget(distortedValue), reactiveHandler);\n                  registerProxy(proxy, value);\n                  ObjectDefineProperty(this, 'reactive', { value: proxy });\n                  return proxy;\n              },\n              get readOnly() {\n                  const readOnlyHandler = new ReadOnlyHandler(membrane, distortedValue);\n                  // caching the readOnly proxy after the first time it is accessed\n                  const proxy = new Proxy(createShadowTarget(distortedValue), readOnlyHandler);\n                  registerProxy(proxy, value);\n                  ObjectDefineProperty(this, 'readOnly', { value: proxy });\n                  return proxy;\n              }\n          };\n          objectGraph.set(distortedValue, reactiveState);\n          return reactiveState;\n      }\n  }\n  /** version: 0.26.0 */\n\n  function wrap(data, mutationCallback) {\n\n    let membrane = new ReactiveMembrane({\n      valueMutated(target, key) {\n        mutationCallback(target, key);\n      }\n\n    });\n    return {\n      data: membrane.getProxy(data),\n      membrane: membrane\n    };\n  }\n  function unwrap$1(membrane, observable) {\n    let unwrappedData = membrane.unwrapProxy(observable);\n    let copy = {};\n    Object.keys(unwrappedData).forEach(key => {\n      if (['$el', '$refs', '$nextTick', '$watch'].includes(key)) return;\n      copy[key] = unwrappedData[key];\n    });\n    return copy;\n  }\n\n  class Component {\n    constructor(el, componentForClone = null) {\n      this.$el = el;\n      const dataAttr = this.$el.getAttribute('x-data');\n      const dataExpression = dataAttr === '' ? '{}' : dataAttr;\n      const initExpression = this.$el.getAttribute('x-init');\n      let dataExtras = {\n        $el: this.$el\n      };\n      let canonicalComponentElementReference = componentForClone ? componentForClone.$el : this.$el;\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(dataExtras, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference);\n          }\n        });\n      });\n      this.unobservedData = componentForClone ? componentForClone.getUnobservedData() : saferEval(el, dataExpression, dataExtras);\n      // Construct a Proxy-based observable. This will be used to handle reactivity.\n\n      let {\n        membrane,\n        data\n      } = this.wrapDataInObservable(this.unobservedData);\n      this.$data = data;\n      this.membrane = membrane; // After making user-supplied data methods reactive, we can now add\n      // our magic properties to the original data for access.\n\n      this.unobservedData.$el = this.$el;\n      this.unobservedData.$refs = this.getRefsProxy();\n      this.nextTickStack = [];\n\n      this.unobservedData.$nextTick = callback => {\n        this.nextTickStack.push(callback);\n      };\n\n      this.watchers = {};\n\n      this.unobservedData.$watch = (property, callback) => {\n        if (!this.watchers[property]) this.watchers[property] = [];\n        this.watchers[property].push(callback);\n      };\n      /* MODERN-ONLY:START */\n      // We remove this piece of code from the legacy build.\n      // In IE11, we have already defined our helpers at this point.\n      // Register custom magic properties.\n\n\n      Object.entries(Alpine.magicProperties).forEach(([name, callback]) => {\n        Object.defineProperty(this.unobservedData, `$${name}`, {\n          get: function get() {\n            return callback(canonicalComponentElementReference, this.$el);\n          }\n        });\n      });\n      /* MODERN-ONLY:END */\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement;\n      componentForClone || Alpine.onBeforeComponentInitializeds.forEach(callback => callback(this));\n      var initReturnedCallback; // If x-init is present AND we aren't cloning (skip x-init on clone)\n\n      if (initExpression && !componentForClone) {\n        // We want to allow data manipulation, but not trigger DOM updates just yet.\n        // We haven't even initialized the elements with their Alpine bindings. I mean c'mon.\n        this.pauseReactivity = true;\n        initReturnedCallback = this.evaluateReturnExpression(this.$el, initExpression);\n        this.pauseReactivity = false;\n      } // Register all our listeners and set all our attribute bindings.\n      // If we're cloning a component, the third parameter ensures no duplicate\n      // event listeners are registered (the mutation observer will take care of them)\n\n\n      this.initializeElements(this.$el, () => {}, componentForClone); // Use mutation observer to detect new elements being added within this component at run-time.\n      // Alpine's just so darn flexible amirite?\n\n      this.listenForNewElementsToInitialize();\n\n      if (typeof initReturnedCallback === 'function') {\n        // Run the callback returned from the \"x-init\" hook to allow the user to do stuff after\n        // Alpine's got it's grubby little paws all over everything.\n        initReturnedCallback.call(this.$data);\n      }\n\n      componentForClone || setTimeout(() => {\n        Alpine.onComponentInitializeds.forEach(callback => callback(this));\n      }, 0);\n    }\n\n    getUnobservedData() {\n      return unwrap$1(this.membrane, this.$data);\n    }\n\n    wrapDataInObservable(data) {\n      var self = this;\n      let updateDom = debounce(function () {\n        self.updateElements(self.$el);\n      }, 0);\n      return wrap(data, (target, key) => {\n        if (self.watchers[key]) {\n          // If there's a watcher for this specific key, run it.\n          self.watchers[key].forEach(callback => callback(target[key]));\n        } else if (Array.isArray(target)) {\n          // Arrays are special cases, if any of the items change, we consider the array as mutated.\n          Object.keys(self.watchers).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // Ignore length mutations since they would result in duplicate calls.\n            // For example, when calling push, we would get a mutation for the item's key\n            // and a second mutation for the length property.\n\n            if (key === 'length') return;\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData[part])) {\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } else {\n          // Let's walk through the watchers with \"dot-notation\" (foo.bar) and see\n          // if this mutation fits any of them.\n          Object.keys(self.watchers).filter(i => i.includes('.')).forEach(fullDotNotationKey => {\n            let dotNotationParts = fullDotNotationKey.split('.'); // If this dot-notation watcher's last \"part\" doesn't match the current\n            // key, then skip it early for performance reasons.\n\n            if (key !== dotNotationParts[dotNotationParts.length - 1]) return; // Now, walk through the dot-notation \"parts\" recursively to find\n            // a match, and call the watcher if one's found.\n\n            dotNotationParts.reduce((comparisonData, part) => {\n              if (Object.is(target, comparisonData)) {\n                // Run the watchers.\n                self.watchers[fullDotNotationKey].forEach(callback => callback(target[key]));\n              }\n\n              return comparisonData[part];\n            }, self.unobservedData);\n          });\n        } // Don't react to data changes for cases like the `x-created` hook.\n\n\n        if (self.pauseReactivity) return;\n        updateDom();\n      });\n    }\n\n    walkAndSkipNestedComponents(el, callback, initializeComponentCallback = () => {}) {\n      walk(el, el => {\n        // We've hit a component.\n        if (el.hasAttribute('x-data')) {\n          // If it's not the current one.\n          if (!el.isSameNode(this.$el)) {\n            // Initialize it if it's not.\n            if (!el.__x) initializeComponentCallback(el); // Now we'll let that sub-component deal with itself.\n\n            return false;\n          }\n        }\n\n        return callback(el);\n      });\n    }\n\n    initializeElements(rootEl, extraVars = () => {}, componentForClone = false) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop\n        if (el.__x_for_key !== undefined) return false; // Don't touch spawns from if directives\n\n        if (el.__x_inserted_me !== undefined) return false;\n        this.initializeElement(el, extraVars, componentForClone ? false : true);\n      }, el => {\n        if (!componentForClone) el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    initializeElement(el, extraVars, shouldRegisterListeners = true) {\n      // To support class attribute merging, we have to know what the element's\n      // original class attribute looked like for reference.\n      if (el.hasAttribute('class') && getXAttrs(el, this).length > 0) {\n        el.__x_original_classes = convertClassStringToArray(el.getAttribute('class'));\n      }\n\n      shouldRegisterListeners && this.registerListeners(el, extraVars);\n      this.resolveBoundAttributes(el, true, extraVars);\n    }\n\n    updateElements(rootEl, extraVars = () => {}) {\n      this.walkAndSkipNestedComponents(rootEl, el => {\n        // Don't touch spawns from for loop (and check if the root is actually a for loop in a parent, don't skip it.)\n        if (el.__x_for_key !== undefined && !el.isSameNode(this.$el)) return false;\n        this.updateElement(el, extraVars);\n      }, el => {\n        el.__x = new Component(el);\n      });\n      this.executeAndClearRemainingShowDirectiveStack();\n      this.executeAndClearNextTickStack(rootEl);\n    }\n\n    executeAndClearNextTickStack(el) {\n      // Skip spawns from alpine directives\n      if (el === this.$el && this.nextTickStack.length > 0) {\n        // We run the tick stack after the next frame to allow any\n        // running transitions to pass the initial show stage.\n        requestAnimationFrame(() => {\n          while (this.nextTickStack.length > 0) {\n            this.nextTickStack.shift()();\n          }\n        });\n      }\n    }\n\n    executeAndClearRemainingShowDirectiveStack() {\n      // The goal here is to start all the x-show transitions\n      // and build a nested promise chain so that elements\n      // only hide when the children are finished hiding.\n      this.showDirectiveStack.reverse().map(handler => {\n        return new Promise((resolve, reject) => {\n          handler(resolve, reject);\n        });\n      }).reduce((promiseChain, promise) => {\n        return promiseChain.then(() => {\n          return promise.then(finishElement => {\n            finishElement();\n          });\n        });\n      }, Promise.resolve(() => {})).catch(e => {\n        if (e !== TRANSITION_CANCELLED) throw e;\n      }); // We've processed the handler stack. let's clear it.\n\n      this.showDirectiveStack = [];\n      this.showDirectiveLastElement = undefined;\n    }\n\n    updateElement(el, extraVars) {\n      this.resolveBoundAttributes(el, false, extraVars);\n    }\n\n    registerListeners(el, extraVars) {\n      getXAttrs(el, this).forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'on':\n            registerListener(this, el, value, modifiers, expression, extraVars);\n            break;\n\n          case 'model':\n            registerModelListener(this, el, modifiers, expression, extraVars);\n            break;\n        }\n      });\n    }\n\n    resolveBoundAttributes(el, initialUpdate = false, extraVars) {\n      let attrs = getXAttrs(el, this);\n      attrs.forEach(({\n        type,\n        value,\n        modifiers,\n        expression\n      }) => {\n        switch (type) {\n          case 'model':\n            handleAttributeBindingDirective(this, el, 'value', expression, extraVars, type, modifiers);\n            break;\n\n          case 'bind':\n            // The :key binding on an x-for is special, ignore it.\n            if (el.tagName.toLowerCase() === 'template' && value === 'key') return;\n            handleAttributeBindingDirective(this, el, value, expression, extraVars, type, modifiers);\n            break;\n\n          case 'text':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleTextDirective(el, output, expression);\n            break;\n\n          case 'html':\n            handleHtmlDirective(this, el, expression, extraVars);\n            break;\n\n          case 'show':\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleShowDirective(this, el, output, modifiers, initialUpdate);\n            break;\n\n          case 'if':\n            // If this element also has x-for on it, don't process x-if.\n            // We will let the \"x-for\" directive handle the \"if\"ing.\n            if (attrs.some(i => i.type === 'for')) return;\n            var output = this.evaluateReturnExpression(el, expression, extraVars);\n            handleIfDirective(this, el, output, initialUpdate, extraVars);\n            break;\n\n          case 'for':\n            handleForDirective(this, el, expression, initialUpdate, extraVars);\n            break;\n\n          case 'cloak':\n            el.removeAttribute('x-cloak');\n            break;\n        }\n      });\n    }\n\n    evaluateReturnExpression(el, expression, extraVars = () => {}) {\n      return saferEval(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    evaluateCommandExpression(el, expression, extraVars = () => {}) {\n      return saferEvalNoReturn(el, expression, this.$data, _objectSpread2(_objectSpread2({}, extraVars()), {}, {\n        $dispatch: this.getDispatchFunction(el)\n      }));\n    }\n\n    getDispatchFunction(el) {\n      return (event, detail = {}) => {\n        el.dispatchEvent(new CustomEvent(event, {\n          detail,\n          bubbles: true\n        }));\n      };\n    }\n\n    listenForNewElementsToInitialize() {\n      const targetNode = this.$el;\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        for (let i = 0; i < mutations.length; i++) {\n          // Filter out mutations triggered from child components.\n          const closestParentComponent = mutations[i].target.closest('[x-data]');\n          if (!(closestParentComponent && closestParentComponent.isSameNode(this.$el))) continue;\n\n          if (mutations[i].type === 'attributes' && mutations[i].attributeName === 'x-data') {\n            const xAttr = mutations[i].target.getAttribute('x-data') || '{}';\n            const rawData = saferEval(this.$el, xAttr, {\n              $el: this.$el\n            });\n            Object.keys(rawData).forEach(key => {\n              if (this.$data[key] !== rawData[key]) {\n                this.$data[key] = rawData[key];\n              }\n            });\n          }\n\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              if (node.nodeType !== 1 || node.__x_inserted_me) return;\n\n              if (node.matches('[x-data]') && !node.__x) {\n                node.__x = new Component(node);\n                return;\n              }\n\n              this.initializeElements(node);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    }\n\n    getRefsProxy() {\n      var self = this;\n      var refObj = {};\n      // One of the goals of this is to not hold elements in memory, but rather re-evaluate\n      // the DOM when the system needs something from it. This way, the framework is flexible and\n      // friendly to outside DOM changes from libraries like Vue/Livewire.\n      // For this reason, I'm using an \"on-demand\" proxy to fake a \"$refs\" object.\n\n      return new Proxy(refObj, {\n        get(object, property) {\n          if (property === '$isAlpineProxy') return true;\n          var ref; // We can't just query the DOM because it's hard to filter out refs in\n          // nested components.\n\n          self.walkAndSkipNestedComponents(self.$el, el => {\n            if (el.hasAttribute('x-ref') && el.getAttribute('x-ref') === property) {\n              ref = el;\n            }\n          });\n          return ref;\n        }\n\n      });\n    }\n\n  }\n\n  const Alpine = {\n    version: \"2.8.2\",\n    pauseMutationObserver: false,\n    magicProperties: {},\n    onComponentInitializeds: [],\n    onBeforeComponentInitializeds: [],\n    ignoreFocusedForValueBinding: false,\n    start: async function start() {\n      if (!isTesting()) {\n        await domReady();\n      }\n\n      this.discoverComponents(el => {\n        this.initializeComponent(el);\n      }); // It's easier and more performant to just support Turbolinks than listen\n      // to MutationObserver mutations at the document level.\n\n      document.addEventListener(\"turbolinks:load\", () => {\n        this.discoverUninitializedComponents(el => {\n          this.initializeComponent(el);\n        });\n      });\n      this.listenForNewUninitializedComponentsAtRunTime();\n    },\n    discoverComponents: function discoverComponents(callback) {\n      const rootEls = document.querySelectorAll('[x-data]');\n      rootEls.forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    discoverUninitializedComponents: function discoverUninitializedComponents(callback, el = null) {\n      const rootEls = (el || document).querySelectorAll('[x-data]');\n      Array.from(rootEls).filter(el => el.__x === undefined).forEach(rootEl => {\n        callback(rootEl);\n      });\n    },\n    listenForNewUninitializedComponentsAtRunTime: function listenForNewUninitializedComponentsAtRunTime() {\n      const targetNode = document.querySelector('body');\n      const observerOptions = {\n        childList: true,\n        attributes: true,\n        subtree: true\n      };\n      const observer = new MutationObserver(mutations => {\n        if (this.pauseMutationObserver) return;\n\n        for (let i = 0; i < mutations.length; i++) {\n          if (mutations[i].addedNodes.length > 0) {\n            mutations[i].addedNodes.forEach(node => {\n              // Discard non-element nodes (like line-breaks)\n              if (node.nodeType !== 1) return; // Discard any changes happening within an existing component.\n              // They will take care of themselves.\n\n              if (node.parentElement && node.parentElement.closest('[x-data]')) return;\n              this.discoverUninitializedComponents(el => {\n                this.initializeComponent(el);\n              }, node.parentElement);\n            });\n          }\n        }\n      });\n      observer.observe(targetNode, observerOptions);\n    },\n    initializeComponent: function initializeComponent(el) {\n      if (!el.__x) {\n        // Wrap in a try/catch so that we don't prevent other components\n        // from initializing when one component contains an error.\n        try {\n          el.__x = new Component(el);\n        } catch (error) {\n          setTimeout(() => {\n            throw error;\n          }, 0);\n        }\n      }\n    },\n    clone: function clone(component, newEl) {\n      if (!newEl.__x) {\n        newEl.__x = new Component(newEl, component);\n      }\n    },\n    addMagicProperty: function addMagicProperty(name, callback) {\n      this.magicProperties[name] = callback;\n    },\n    onComponentInitialized: function onComponentInitialized(callback) {\n      this.onComponentInitializeds.push(callback);\n    },\n    onBeforeComponentInitialized: function onBeforeComponentInitialized(callback) {\n      this.onBeforeComponentInitializeds.push(callback);\n    }\n  };\n\n  if (!isTesting()) {\n    window.Alpine = Alpine;\n\n    if (window.deferLoadingAlpine) {\n      window.deferLoadingAlpine(function () {\n        window.Alpine.start();\n      });\n    } else {\n      window.Alpine.start();\n    }\n  }\n\n  return Alpine;\n\n})));\n","export default {\n  mainContent() {\n    return `\n        <div class=\"px-4 py-10\">\n          ${this.toolTip()}\n          <div class=\"flex flex-row-reverse\">\n            <div id=\"${this.target}_display\" class=\"flex-1 ml-4\"></div>\n              <div id=\"${\n                this.target\n              }_wrapper\" class=\"flex-1 relative flex text-xs border border-gray-800 rounded overflow-hidden shadow leading-loose\">\n                <div id=\"${\n                  this.target\n                }_numbers\" class=\"p-2 text-center bg-gray-100 border-r-2 border-blue-400 bg-gray-800 text-white\">\n              </div>\n\n              <textarea id=\"${\n                this.target\n              }_editor\" class=\"flex-1 p-2 outline-none\"></textarea>\n            </div>\n          </div>\n        </div>\n      `;\n  },\n  toolTip() {\n    return `\n        <div class=\"mb-4 flex space-x-2\">\n          <div x-data=\"{show: false}\" class=\"relative\">\n            <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow\" @click=\"show=!show\">H</button>\n            <div x-show=\"show\" class=\"absolute z-20 p-4 bg-white flex flex-col space-y-4 mt-2 shadow border border-gray-300 rounded\">\n              <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"h1\" @click=\"show=false\">H1</button>\n              <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"h2\" @click=\"show=false\">H2</button>\n              <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"h3\" @click=\"show=false\">H3</button>\n            </div>\n          </div>\n          <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"p\">p</button>\n          <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"a\" data-class=\"text-blue-600\">a</button>\n          <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"div\">div</button>\n          <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"div\" data-class=\"flex\">flex</button>\n          <button class=\"border border-gray-600 py-1 px-3 text-sm rounded shadow ${this.target}_tooltip\" data-tag=\"button\" data-class=\"py-1 px-4 shadow rounded\">Button</button>\n        </div>\n      `;\n  },\n};\n","export default {\n  tooltip() {\n    this.tooltipHandleBind();\n  },\n  tooltipHandleBind() {\n    const tooltips = document.querySelectorAll(`.${this.target}_tooltip`);\n    tooltips.forEach((el) =>\n      el.addEventListener(\"click\", (e) => {\n        this.tooltipHandleTag(e.target.dataset.tag, e.target.dataset.class);\n      })\n    );\n  },\n  tooltipHandleTag(tagTyp, tagClass) {\n    let tag = \"\";\n    if (tagClass) {\n      const insertClass = `class='${tagClass}'`;\n      tag = `<${tagTyp} ${insertClass}>\\n\\n</${tagTyp}>`;\n    } else {\n      tag = `<${tagTyp}>\\n\\n</${tagTyp}>`;\n    }\n\n    if (this.editor.selectionStart || this.editor.selectionStart == \"0\") {\n      var startPos = this.editor.selectionStart;\n      var endPos = this.editor.selectionEnd;\n      this.editor.value =\n        this.editor.value.substring(0, startPos) +\n        tag +\n        this.editor.value.substring(endPos, this.editor.value.length);\n    } else {\n      this.editor.value += tag;\n    }\n\n    this.formatText();\n  },\n};\n","class Rapyd {\n  props;\n\n  constructor(props = {}, methods = {}, init = null) {\n    this.props = props;\n\n    for (name in methods) {\n      this[name] = methods[name];\n    }\n\n    if (init) {\n      this.init(init);\n    }\n  }\n\n  init(cb) {\n    cb = cb.bind(this);\n    cb();\n  }\n\n  renderText(el, value) {\n    document.querySelector(el).innerText = value;\n  }\n\n  renderHtml(el, value) {\n    document.querySelector(el).innerHTML = value;\n  }\n}\n\nexport default Rapyd;\n","import \"alpinejs\";\nimport Rapyd from \"./Rapyd\";\nimport mainContent from \"./html/html\";\nimport tooltip from \"./helpers/tooltip\";\n\nclass Editor extends Rapyd {\n  target;\n  editor = null;\n\n  constructor(target) {\n    super({}, { ...mainContent, ...tooltip });\n\n    this.target = target;\n\n    this.init();\n  }\n\n  allowTab() {\n    this.editor.addEventListener(\n      \"keydown\",\n      function (e) {\n        if (e.key == \"Tab\") {\n          e.preventDefault();\n          var start = e.target.selectionStart;\n          var end = e.target.selectionEnd;\n\n          e.target.value =\n            e.target.value.substring(0, start) +\n            \"\\t\" +\n            e.target.value.substring(end);\n          e.target.selectionStart = e.target.selectionEnd = start + 1;\n        }\n      }.bind(this)\n    );\n  }\n\n  handleTextarea() {\n    this.editor.addEventListener(\n      \"keyup\",\n      function (e) {\n        this.keyBefore = e.target.value;\n        this.content = e.target.value;\n\n        this.setBody(this.content);\n      }.bind(this)\n    );\n  }\n\n  calcNumbers() {\n    let content = document\n      .getElementById(`${this.target}_editor`)\n      .value.split(\"\\n\");\n\n    let newContent = [];\n\n    if (content.length < 30) {\n      content.length = 30;\n    }\n\n    for (let i = 0; i < content.length; i++) {\n      newContent.push(`<p>${i + 1}</p>`);\n    }\n\n    document.getElementById(\n      `${this.target}_numbers`\n    ).innerHTML = newContent.join(\"\");\n  }\n\n  setBody(value) {\n    this.renderHtml(`#${this.target}_display`, value);\n    this.calcNumbers();\n  }\n\n  formatText() {\n    // let string = this.editor.value;\n    // string = string.replace(/\\n/g, '\\n    ');\n    // this.editor.value = string\n  }\n\n  init() {\n    const content = this.mainContent(this.target);\n\n    this.renderHtml(`#${this.target}`, content);\n\n    this.calcNumbers();\n\n    this.tooltip();\n\n    this.editor = document.getElementById(`${this.target}_editor`);\n\n    this.allowTab();\n\n    this.handleTextarea();\n\n    this.setBody(this.editor.value);\n  }\n}\n\nnew Editor(\"app\");\n\nexport default Editor;\n"]}